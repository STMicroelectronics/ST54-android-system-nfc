package {
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "system_nfc_license"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    default_applicable_licenses: ["st_system_nfc_license"],
}

cc_library {
    arch: {
        arm: {
            instruction_set: "arm",
        },
    },
    name: "libstnfc-nci",
    owner: "st",
    system_ext_specific: true,
    shared_libs: [
        "libcutils",
        "liblog",
        "libdl",
        "libz",
        "libchrome",
        "libbase",
        "libstatslog_nfc_st",

        // Treble configuration
        "libhidlbase",
        "libutils",
        "android.hardware.nfc@1.0",
        "android.hardware.nfc@1.1",
        "android.hardware.nfc@1.2",
        // Add for AIDL
        "android.hardware.nfc-V1-ndk",
        "libbinder_ndk",
    ],
    static_libs: [
        "libstnfcutils",
    ],
    cflags: [
        "-DDYN_ALLOC=1",
        // "-DGKI_LEAKAGE_DEBUG",
        "-DBUILDCFG=1",
        "-DGKI_PTHREAD_JOINABLE",
        "-Wall",
        "-Werror",
        "-Wimplicit-fallthrough",
        "-DDCHECK_ALWAYS_ON"
    ],
    header_libs : [
        "libutils_headers",
    ],
    static: {
        cflags: ["-fvisibility=hidden"],
    },
    local_include_dirs: [
        "include",
        "gki/ulinux",
        "gki/common",
        "nfa/include",
        "nfc/include",
    ],
    export_include_dirs: [
        "include",
        "gki/ulinux",
        "gki/common",
        "nfc/include",
        "nfa/include",
    ],
    export_static_lib_headers: [
        "libstnfcutils",
    ],
    srcs: [
        "nfa/ce/*.cc",
        "nfa/dm/*.cc",
        "nfa/ee/*.cc",
        "nfa/hci/*.cc",
        "nfa/p2p/*.cc",
        "nfa/rw/*.cc",
        "nfa/sys/*.cc",
        "nfc/llcp/*.cc",
        "nfc/nci/*.cc",
        "nfc/ndef/*.cc",
        "nfc/nfc/*.cc",
        "nfc/tags/*.cc",
        "adaptation/*.cc",
        "gki/common/*.cc",
        "gki/ulinux/*.cc",
    ],
    required: [
        // Provide a default libnfc-nci.conf in /system/etc for devices that
        // does not ship one in /product
        "libnfc-nci.conf-default",
    ],
    sanitize: {
        misc_undefined: ["bounds"],
        integer_overflow: true,
        scs: true,
    },

}

cc_library {
    name: "libstatslog_nfc_st",
    host_supported: true,
    generated_sources: ["statslog_nfc_st.cpp"],
    generated_headers: ["statslog_nfc_st.h"],
    export_generated_headers: ["statslog_nfc_st.h"],
    system_ext_specific: true,    
    shared_libs: [
        "libcutils",
    ],
    target: {
        android: {
            shared_libs: [
                "libstatssocket",
            ],
        },
        host: {
            static_libs: [
                "libstatssocket",
            ],
        },
        darwin: {
            enabled: false,
        },
    },
}

genrule {
    name: "statslog_nfc_st.h",
    tools: ["stats-log-api-gen"],
    cmd: "$(location stats-log-api-gen) --header $(genDir)/statslog_nfc_st.h --module nfc --namespace nfc,stats",
    out: [
        "statslog_nfc_st.h",
    ],
}

genrule {
    name: "statslog_nfc_st.cpp",
    tools: ["stats-log-api-gen"],
    cmd: "$(location stats-log-api-gen) --cpp $(genDir)/statslog_nfc_st.cpp --module nfc --namespace nfc,stats --importHeader statslog_nfc_st.h",
    out: [
        "statslog_nfc_st.cpp",
    ],
}


genrule {
    name: "NfcGeneratedPackets_rust_st",
    tools: [
        "bluetooth_packetgen",
    ],
    cmd: "$(location bluetooth_packetgen) --include=vendor/st/opensource/commonsys/system/nfc/src --out=$(genDir) $(in) --rust",
    srcs: [
        "nci_packets.pdl",
    ],
    out: [
        "nci_packets.rs",
    ],
}

rust_library {
    name: "libnfc_packets_st",
    defaults: ["st_nfc_rust_defaults"],
    crate_name: "nfc_packets",
    srcs: ["rust/packets/lib.rs", ":NfcGeneratedPackets_rust_st"],
    host_supported: true,
    proc_macros: ["libnum_derive"],
    rustlibs: [
        "libbytes",
        "libnum_traits",
        "libthiserror",
        "liblog_rust",
    ],
}

rust_test_host {
    name: "libnfc_packets_test_st",
    defaults: ["st_nfc_rust_defaults"],
    srcs: ["rust/packets/lib.rs", ":NfcGeneratedPackets_rust_st"],
    test_suites: ["general-tests"],
    proc_macros: ["libnum_derive"],
    rustlibs: [
        "libbytes",
        "libnum_traits",
        "libthiserror",
        "liblog_rust",
    ],
}

